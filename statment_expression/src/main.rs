fn main() {
    println!("Hello, world!");

    // 以下都是语句，它们完成了一个具体的操作，但是并没有返回值，因此是语句。
    let a = 8;
    let b: Vec<f64> = Vec::new();
    let (a, c) = ("hi", false);
    // let是语句他没有返回值所以不能赋值给其他变量
    // let e = (let d = 1);

    let y = {
        let x = 1;
        x + 3
    };
    // 上面{}中的内容是表达式,因为表达式会进行求值，然后返回一个值
    println!("{}", y);

    // 如果表达式不返回任何值，会隐式的返回一个（）。
    assert_eq!(add_with_extra(1, 2), ())
}

// rust是基于表达式的语言,基本所有的代码都可以看作是表达式
// rust的函数是由一系列的语句组成,最后由一个表达式来返回值，例如:
fn add_with_extra(x: i32, y: i32) {
    let x = x + 1; // 语句
    let y = y + 5; // 语句
    x + y; // 表达式
}
// 语句会执行一些操作但是不会返回一个值，而表达式会在求值后返回一个值，因此在上述函数体的三行代码中，前两行是语句，最后一行是表达式。
